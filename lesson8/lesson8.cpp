// lesson8.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <fstream>
#include <locale>
#include <math.h>
#include <cstdint>
#include <cassert>
#include <functional>
#include <vector>
#include <algorithm>

using namespace std;

template <typename First>
const First& my_div(const First& arg1, const First& arg2)
{
    if (arg2 == 0)
    {
        throw "DivisionByZero";
    }
    else
    {
        return arg1 / arg2;
    }
}

        

void Zadanie1()
{
    /*--------------------------------------------------
    Написать шаблонную функцию div, которая должна вычислять результат деления двух параметров 
    и запускать исключение DivisionByZero, если второй параметр равен 0.
    В функции main выводить результат вызова функции div в консоль, а также ловить исключения.
     ----------------------------------------------------*/
    
    try
    {
        double rez = my_div(9.3, 0.0);
        cout << rez;
    }
    catch (const char* ex)
    {
        cout << ex;
    }
};

class Ex
{
    double x;
public:
    Ex(double x_m) :x(x_m) {};
    ~Ex() {};
    double getX() const { return x;}
};
class Bar
{
    double y;
public:
    Bar(double y_m = 0) :y(y_m) {};
    ~Bar() {};
    void set(const double a);
};
void Bar::set(const double a)
{
    if (y + a > 100)
    {
        throw Ex(a * y);
    }
    else
    {
        y = a;
    }

}

void Zadanie2()
{
    /*--------------------------------------------------
    +Написать класс Ex, хранящий вещественное число x и имеющий конструктор по вещественному числу,
    +инициализирующий x значением параметра. 
    
    +Написать класс Bar, хранящий вещественное число y (конструктор по умолчанию инициализирует его нулем) 
    +и имеющий метод set с единственным вещественным параметром a. 
    +Если y + a > 100, возбуждается исключение типа Ex с данными a*y, иначе в y заносится значение a. 
    
    +В функции main завести переменную класса Bar и в цикле в блоке try вводить с клавиатуры целое n. 
    +Использовать его в качестве параметра метода set до тех пор, пока не будет введено 0. 
    +В обработчике исключения выводить сообщение об ошибке, содержащее данные объекта исключения.
     ----------------------------------------------------*/
    Bar b;
    int n;
        do
        {
            try
            {
                cout << "Введите число" << '\n';
                cin >> n;
                b.set(n);
            }
            catch (const Ex& err)
            {
                cout << "Сгенерировано исключение " << err.getX() << '\n';
            }
        } while (n != 0);

};

class Robot
{
    int x;
    int y;
public:
    Robot(int x_m, int y_m);
    ~Robot() {};

    void LEFT();
    void UP();
    void RIGHT();
    void DOWN();
};

Robot::Robot(int x_m = 1, int y_m = 1):x(x_m), y (y_m)
{
    //по умолчанию робот стоит в левой верхней клетке поля

    if ((x_m < 1) || (x_m > 10) || (y_m < 1) || (y_m > 10))
    {
        throw "Некорректные координаты при инициализации робота...";
    }
}
void Robot::LEFT()
{
    if (x > 1) { x--; cout << "Turn left" << '\n'; }
    else { throw "OffTheField"; }
}
void Robot::RIGHT()
{
    if (x < 10) { x++; cout << "Turn right" << '\n';}
    else { throw "OffTheField"; }
}
void Robot::UP()
{
    if (y > 1) { y--; cout << "Turn up" << '\n';}
    else { throw "OffTheField"; }
}
void Robot::DOWN()
{
    if (y < 10) { y++; cout << "Turn down" << '\n';}
    else { throw "OffTheField"; }
}

void Zadanie3()
{
    /*--------------------------------------------------
    Написать класс «робот», моделирующий перемещения робота по сетке 10x10, 
    у которого есть метод, означающий задание переместиться на соседнюю позицию.
    Эти методы должны запускать классы-исключения OffTheField, если робот должен уйти с сетки,
    и IllegalCommand, если подана неверная команда (направление не находится в нужном диапазоне).
    Объект исключения должен содержать всю необходимую информацию — текущую позицию и направление движения. 
    Написать функцию main, пользующуюся этим классом и перехватывающую все исключения от его методов, 
    а также выводящую подробную информацию о всех возникающих ошибках.

     ----------------------------------------------------*/
    try
    {
        Robot r(3, 3);
        r.LEFT();
        r.LEFT();
        r.LEFT();
        r.LEFT();
    }
    catch (const char* e)
    {
       cout << e;
    }
};

void Zadanie4()
{
    /*--------------------------------------------------

     ----------------------------------------------------*/

};

void Zadanie5()
{
    /*--------------------------------------------------

     ----------------------------------------------------*/

};

int main()
{
    setlocale(LC_ALL, "Russian");

    std::cout << "Введите номер задания цифрой" << std::endl;
    unsigned short nomerZadania;

    std::cin >> nomerZadania;

    if (std::cin.fail())
    {
        std::cout << "Некорректный ввод номера задания...";
        std::cin.clear();
        std::cin.ignore(32767, '\n');
    }
    else
    {
        switch (nomerZadania)
        {
        case 1:Zadanie1(); break;

        case 2:Zadanie2(); break;

        case 3:Zadanie3(); break;

        case 4:Zadanie4(); break;

        case 5:Zadanie5(); break;

        default: break;
        }
    }
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.